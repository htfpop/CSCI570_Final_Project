package basic.test;

import static org.junit.Assert.*;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import basic.Basic;
import efficient.Efficient;
import excelWriter.writeXLSX;



public class TestInputStringGenerator {
	Basic parsedFile;
	static ArrayList<String> listOfPaths;
	static String[] dnaA;
	static String[] dnaB;

	/**
	 * SETTING UP BEFORE TEST
	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception {

		//need to be RELATIVE PATH  for this to work on everyones machine or use full path but do not commit 
		//String filePath = "ProjectRequirements\\\\datapoints\\\\";
		//String filePath = "ProjectRequirements\\\\SampleTestCases\\\\";
		//String filePath = "ProjectRequirements//SampleTestCases//";  //path fix for MacOS
		//String filePath = "ProjectRequirements//datapoints//";
		String filePath = "ProjectRequirements//SampleTestCases//";



		// if new file then need to add testing measurements to dnaA and dnaB
		String[] listOfFiles = new String[]{
				"input5.txt",
//				"in0.txt",
//				"in1.txt",
//				"in2.txt",
//				"in3.txt"
//				"in4.txt",
//				"in5.txt",
//				"in6.txt",
//				"in7.txt",
//				"in8.txt",
//				"in9.txt",
//				"in10.txt",
//				"in11.txt",
//				"in12.txt",
//				"in13.txt",
//				"in14.txt",
//				"in15.txt",
//				"in16.txt",
//				"in17.txt",
//				"in18.txt",
//				"in19.txt",
//				"in20.txt",
//				"in21.txt"
				//generation of new points 12/6/22
//				"in22.txt"
//				"in23.txt"
//				"in24.txt"
		};
		
		// if new file then need to add testing measurements to dnaA and dnaB
//		String[] listOfFiles = new String[]{
//											"input1.txt",
//											"input2.txt",
//											"input3.txt",
//											"input4.txt",
//											"input5.txt",
//};

		listOfPaths = new ArrayList<>();
		for(String str : listOfFiles) {
			listOfPaths.add(filePath + str); 
		}
		
		
		//testing against dna A 
		dnaA = new String[]{
				//"ww",
				"ACACTGACTACTGACTGGTGACTACTGACTGG",
				"CCACCAGG",
				"CTTCTCTTCTTCTTCCCTTCCTCTTCCCTTCC",
				"GGTGTGTGTCACACACATGTGTGTCAGGTGTGTGTCACACACATGTGTGTCACACACACACACA",
				"AAGGAAGGAAAGGAAGGAGGAAGGAGGAAGAAGGAAGAAGGAAGGAAAGGAAGGAGGAAGGAGGAAGAAGGAAGGAAAGGAAGGAGGAAGGAGGAAGGAGAGAAAGGAAGGAGGAAGGAGGAAGGAGA",
				"TTTTTTTCTTTTTTCTTCCTTCTTTCTTTTTTTTCTTTTTTCTTCCTTCTTTCTTCCTTCTCCTTCTTTCTTCCTTCTTTCTTTTTTCTTCCTTCTTTCTTCCTTCTCCTTCTTTCTTCCTTCTCCTTCTCCTTCTTTCTTCCTTCTTTCTTTTTTCTTCCTTCTTTCTTCCTTCTCCTTCTTTCTTCCTTC",
				"GTGTCGTGTGTGTCGTGTGTCGTGTCACAACAGTGTCGGTGTCGTGTGTGTCGTGTGTCGTGTCACAACAGTGTCGTGTCACAACAGTCACAACAGTGTCGTGTCACAACAGTCGTGTCACAACAGTGTCGTGTCACAACAGTCACAACAGTGTCGTGTCACAACATGTCACAACAGTCACAACAGTGTCGTGTCACAACAGTCGTGTCACAACAGTGTCGTGTCACAACAGTCACAACAGTGTCGTGTCACAACA",
				"TGTGGGTGTGTGTGTGGGTGTGTGGGTGTGGTGTGGGTGTGTGTTGTGGGTGTGTGTGTGGGTGTGTGGGTGTGGTGTGGGTGTGTGTGTGGGTGTGTGGGTGTGGTGTGGGTGTGTGTGTGGGTGTGTGGGTGTGGGTGGGGGTGTGGGTGGGGTGGGGGTGTGGGTGGGTGTGGGTGTGTGTGTGGGTGTGTGGGTGTGGGTGGGGGTGTGGGTGGGGTGGGGGTGTGGGTGGGGTGGGTGTGTGGGTGTGGTGTGGGTGTGTGTGTGGGTGTGTGGGTGTGGGTGGGGGTGTGGGTGGGGTGGGGGTGTGGGTGGGTGTGGGTGTGTGTGTGGGTGTGTGGGTGTGGGTGGGGGTGTGGGTGGGGTGGGGGTGTGGGTGGG",
				"GTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCGTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCTCTGTGTCTCTGTCTCTTCTGTCTCTTCTGGTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCGTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCTCTGTGTCTCTGTCTCTTCTGTCTCTTCTGTGTCTCTGTCTCTTCTGTCTCTTGTGTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCGTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCTCTGTGTCTCTGTCTCTTCTGTCTCTTCTGGTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCGTGTGTCGTGTGTGTCGTGTGTCTCTGTCTCTTCTGTCTCTGTGTCTCTGTCTCTTCTGTCTCTTCTGTGTCTCTGTCTCTTCTGTCTCTTGTCTCTGTCTCTTCTGTCTCTCTCTGTCTCTTCTGTCTCT",
				"AAACCTACCTTTCCTACCTTTAAACCTACCTTTCCAAAAAACCTACCTTTCCTACCTTTAAACCTACCTTTCCAAACCTACCTTTCCTACCTTTAAACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCAAACCTACCTTTCCTACCTTTAAACCTACCTTTCCAAAAAACCTACCTTTCCTACCTTTAAACCTACCTTTCCAAACCTACCTTTCCTACCTTTAAACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTCCTACCTTTCCTACCTTTAAACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTTTTTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTCCTACCTTTCCTACCTTTAAACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTTTACCTTTACCTACCTTTCCTACCTTTACCTACCTTTCCTACCTTT",
				
				"TATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTATATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTGTGTTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTGTGTGTAGTGTTATTATAGTGTAGTGTGTTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTGTGTGTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTGTGTTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTGTGTGTAGTGTTATTATAGTGTAGTGTGTTGTAGTGTTATTATAGTGTAGTTATTATTATTATAGTGTAGTGTTATTATAGTGTAGTGTAGTGTAGTGTTATTATAGTGTAGTGTGT",
				"CATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCACATCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCACATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGCATTGCATTCATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTTGCATTGCATTGCATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCACATCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCACATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTCATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGCATTGCATTCATCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTGGTGCATTGCATTGCATTGCATTGCATTGCATTGCATTG",
				
				"AAGAGAAAAGAGAAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAAGAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAAGAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGATTAGAGATTAAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAAGAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAAGAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGATTAGAGATTAAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATTAGAGAAAAGAGAAAGAGATTAGAGATTAAGAGAAAAGAGAAAGAGATTAGAGATT",
				"GTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCGTCTGATCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCCTACCCGAGTCTGATCTACCCGAAGTCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCCTGGTGCCGGGCCAGTCTGGTGCCGGGCCGCC"
				
				};
		//testing for dna B 
		dnaB = new String[]{
				//"ww",
				"TATTATACGCTATTATACGCGACGCGGACGCG",
				"CATGCATG",
				"CCCCGACGACCCCCGACGACCGACGACGACGA",
				"AAAAAAAATTTTAAAAAAATTTTATTTTATTTTAAAAAATTTTAAAAAAATTTTATTTTATTTT",
				"GCGCCGCGCCCGCGCCCGCGCCCCCCCGCGCCCCCCCCGCGCCGCGCCCGCGCCCGCGCCCCCCCGCGCCCCCCCCGCGCCCGCGCCCCCCCGCGCCCCCCCGCGCCCGCGCCCCCCCGCGCCCCCCC",
				"AGAAGAGTTAGAAAAGAAGAGTTAGAAAGAAGAGTTAGAAGAGTTGTTGTTGAGTTGTTGTTGAAGAGTTAGAAGAGTTGTTGTTGAGTTGTAGAAGAGTTAGAAAAGAAGAGTTAGAAAGAAGAGTTAGAAGAGTTGTTGTTGAGTTGTTGTTGAAGAGTTAGAAGAGTTGTTGTTGAGTTGTTGTTTGTT",
				"AGTAAGTAGTAAGTAAAGTAAGTAGTAAGTAAGTAGTAAGTAAGTAAGTAAAGTAAAGTAGTAAGTAAGTAAGTAAAGTAGTAGTAAGTAAGTAAGTAAAGTAAAGTAGTAAAGTAAGTAGTAAGTAAAGTAAGTAGTAAGTAAGTAGTAAGTAAGTAAGTAAAGTAAAGTAGTAAGTAAGTAAGTAAAGTAGTAGTAAGTAAGTAAGTAAAGTAAAGTAGTAAGTAAGTAAGTAAAGTAGTAAGTAAGTAAAGTA",
				"GGAGAGGAGATGGAGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGATTGGAGAGGAGATGGAGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGATTGGAGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGATGGAGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGATGATTGAGATGATTGATGATAGATGATTGAGATGATTGATGAT",
				"GTATGGTATGGTATGTATGTATGTATGGTATGGTATGTATGTATGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATGTATGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATTATTGTATGGTATGTATTATTGTATGTATGTATGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATGTATGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATTATTGTATGGTATGTATTATTGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATGTATGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATTATTGTATGGTATGTATTATTGTATGTATGTATGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATGTATGGTATGTATTAGTATGGTATGTATTATTTAGTATGGTATGTATTATTGTATGGTATGTATTATT",
				"GGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTTAGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTTAGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAAAGTTAAAATTGGTTAAGGTTAATTGGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAAAGTTAAATAATTGGTTAAGGTTAATTGGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAAAGTTAAAATTGGTTAAGGTTAATTGGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAGGGGTTGGGGTTGGTTAATTGGTTAAGGTTAATTGGTTAAAGTTAAA",
				
				"GCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCGCCGCGCCGCCAAGCCGCGCCGGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCAAGCCAACAGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCAAGCCAACAAGCCGCCAACAACAAGCCGCCAAAGCCGCCAACAACAAGCCGCCAAAAGCCAACAGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCAAGCCAACAAGCCGCCAACAACAAGCCGCCAAAGCCGCCAACAACAAGCCGCCAACGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCAAGCCAACAGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCAAGCCAACAAGCCGCCAACAACAAGCCGCCAAAGCCGCCAACAACAAGCCGCCAAAAGCCAACAGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCGCGCCGCCAAGCCGCGCCGCGCCGCCAAGCCGCCAACAAGCCGCCAACAACAAGCCGCCAAGCCAACAAGCCGCCAACAACAAGCCGCCAAAGCCGCCAACAACAAGCCGCCAA",
				"AAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAAAGAGAAGAGTGAAAGAGAAGAGTGAGTTGAGTGTTGAGTAAGAGAAGAGTGAGTTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGTGAGTGTTGAGTAGAAGAGTGAGTTGAGTGTTGAGT",
				"AAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAAGAGGGAAGAGGGGAGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGGGAGGGGGGGAAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAAGAGGGAAGAGGGGAGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGGGAAGAGGGGAAAGAGGGAAGAGGGGAGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGGGAGGGGGGGAAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAAGAGGGAAGAGGGGAGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAGAGGGAAGAGGGAAGAGGGAAGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGGGAAAGAGGGAAGAGGGGAGGGGAGGGGGGGAGGG",
				"AAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGAAGATCAAAGAAGAAGATCAAGAAGATCAAAGAAGAAGATCAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAAGAAGATCAATCAATCAAAGATCAATCAATCAAAGATCAATCAATCA",
				"AAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTAAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAGTACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAAAAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTAAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAGTACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAGTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAGTACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAGTACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAGTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAGTACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAAATACATGTTTGAAGTAAATACATGTTTGAAGTACTTAATGACGCAAGCTTAATGACGCAAGATGACGCAAGCTTAATGACGCAAGAG"
				}; 


	}

//	/**
//	 * MAIN TEST
//	 */
//	//@Test
//	public void basic() {
//		try {
//			int cnt=0;
//			for(String filePath : listOfPaths) {
//				System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
//				System.out.println("********basic******** Testing file: " + filePath);
//				String[] strArry = new String[] {filePath};
//				String[] dnaStrings = Basic.parseStrings(strArry);
//
//				double beforeUsedMem=Basic.getMemoryInKB();
//				double startTime = Basic.getTimeInMilliseconds();
//
//				Basic algo = new Basic(dnaStrings[0].toCharArray(),dnaStrings[1].toCharArray(),Basic.initAlphaTableMap(),30);
//				double afterUsedMem = Basic.getMemoryInKB();
//				double endTime = Basic.getTimeInMilliseconds();
//				double totalUsage = afterUsedMem-beforeUsedMem;
//				double totalTime = endTime - startTime;
//				String dnaSeqA = algo.getDnaA();
//				String dnaSeqB = algo.getDnaB();
//				//System.out.println("A :" + dnaSeqA);
//				//System.out.println("B :" + dnaSeqB);
//				//algo.printArray();
//				algo.printOptVal();
//				algo.printdnaAOut();
//				algo.printdnaBOut();
//				System.out.println(String.valueOf(totalTime));
//				System.out.println(String.valueOf(totalUsage));
//				//gapCounterTest();
//				assertEquals("DNA A", dnaA[cnt], dnaSeqA);
//				assertEquals("DNA B", dnaB[cnt], dnaSeqB);
//				System.out.println("=================================================");
//				cnt++;
//			}
//		}
//		catch(FileNotFoundException fnf) {
//			System.out.println("File not FOUND");
//			fnf.printStackTrace();
//		}
//		catch(Exception ee) {
//			System.out.println("There was a fail in the basic");
//			ee.printStackTrace();
//		}
//
//	}
//
//	//=========================================================================================================================================================
//
//	//@Test
//	public void efficient() {
//		try {
//			int cnt=0;
//			for(String filePath : listOfPaths) {
//				System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
//				System.out.println("********efficient******** Testing file: " + filePath);
//				String[] strArry = new String[] {filePath};
//				String[] dnaStrings = Basic.parseStrings(strArry);
//
//				double beforeUsedMem=Basic.getMemoryInKB();
//				double startTime = Basic.getTimeInMilliseconds();
//
//				Efficient algo = new Efficient(dnaStrings[0].toCharArray(),dnaStrings[1].toCharArray(),Basic.initAlphaTableMap(),30);
//				double afterUsedMem = Basic.getMemoryInKB();
//				double endTime = Basic.getTimeInMilliseconds();
//				double totalUsage = afterUsedMem-beforeUsedMem;
//				double totalTime = endTime - startTime;
//				//String dnaSeqA = algo.getDnaA();
//				//String dnaSeqB = algo.getDnaB();
//				//System.out.println("A :" + dnaSeqA);
//				//System.out.println("B :" + dnaSeqB);
//				//parsedFile.printArray();
//				algo.printOptVal();
//				//algo.printdnaAOut();
//				//algo.printdnaBOut();
//				System.out.println(String.valueOf(totalTime));
//				System.out.println(String.valueOf(totalUsage));
//				//assertEquals("DNA A", dnaA[cnt], dnaSeqA);
//				//assertEquals("DNA B", dnaB[cnt], dnaSeqB);
//				System.out.println("=================================================");
//				cnt++;
//			}
//		}
//		catch(FileNotFoundException fnf) {
//			System.out.println("File not FOUND");
//			fnf.printStackTrace();
//		}
//		catch(Exception ee) {
//			System.out.println("There was a fail in the efficient");
//			ee.printStackTrace();
//		}
//
//	}
	@Test
	public void both() throws IOException {
		int rowCnt = 1;
		int m_n_column = 0;
		int EffOptVal_column = 1;
		int EffTime_column = 2;
		int EffUtilization_column = 3;
		int BasicOptVal_column = 4;
		int BasicTime_column = 5;
		int BasicUtilization_column = 6;
		double afterUsedMem = 0;
		double endTime = 0;
		double totalUsage = 0;
		double totalTime = 0;
		double beforeUsedMem = 0;
		double startTime = 0;
		//Create Excel Workbook
		writeXLSX writeToExcel = new writeXLSX("output/excelOut_sampletescases5.xlsx");
		//writeXLSX writeToExcel = new writeXLSX("output/excelOut_datapoints24.xlsx");

		//Setup Excel column names
		setExcelHeader(writeToExcel);

		try {
			for(String filePath : listOfPaths)
			{
				System.out.println("********efficient******** Testing file: " + filePath);
				String[] strArry = new String[] {filePath};
				String[] dnaStrings = Basic.parseStrings(strArry);

				System.gc();

				beforeUsedMem= getMemoryInKBDouble();
				startTime = getTimeInMillisecondsDouble();

				Efficient algo = new Efficient(dnaStrings[0].toCharArray(),dnaStrings[1].toCharArray(),Basic.initAlphaTableMap(),30);

				afterUsedMem = getMemoryInKBDouble();

				endTime = getTimeInMillisecondsDouble();

				totalUsage = afterUsedMem - beforeUsedMem;
				totalTime = endTime - startTime;

				algo.printOptVal();
				algo.printdnaAOut();
				gapCounter(algo.getDnaAOut());
				algo.printdnaBOut();
				gapCounter(algo.getDnaBOut());

				System.out.printf("Total Time: %f ms\r\n", totalTime);
				System.out.printf("Before Memory Usage: %f KB\r\n", beforeUsedMem);
				System.out.printf("After Memory Usage: %f KB\r\n", afterUsedMem);
				System.out.printf("Total Utilization: %f KB\r\n", totalUsage);

				writeToExcel.writeInt(rowCnt,m_n_column,dnaStrings[0].length() + dnaStrings[1].length());
				writeToExcel.writeInt(rowCnt, EffOptVal_column, algo.getOptVal());
				writeToExcel.writeDouble(rowCnt, EffTime_column, totalTime);
				writeToExcel.writeDouble(rowCnt, EffUtilization_column, totalUsage);

				System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

				//Need to free the object?
				algo = null;
				beforeUsedMem = 0;
				afterUsedMem = 0;
				startTime = 0;
				endTime = 0;
				totalUsage = 0;
				totalTime = 0;


				System.out.println("********basic******** Testing file: " + filePath);

				System.gc();
				beforeUsedMem=getMemoryInKBDouble();
				startTime = getTimeInMillisecondsDouble();
				
				Basic algo1 = new Basic(dnaStrings[0].toCharArray(),dnaStrings[1].toCharArray(),Basic.initAlphaTableMap(),30);

				afterUsedMem = getMemoryInKBDouble();

				endTime = getTimeInMillisecondsDouble();

				totalUsage = afterUsedMem - beforeUsedMem;
				totalTime = endTime - startTime;

				algo1.printOptVal();
				algo1.printdnaAOut();
				gapCounter(algo1.getDnaAOut()); 
				algo1.printdnaBOut();
				gapCounter(algo1.getDnaBOut());

				System.out.printf("Total Time: %f ms\r\n", totalTime);
				System.out.printf("Before Memory Usage: %f KB\r\n", beforeUsedMem);
				System.out.printf("After Memory Usage: %f KB\r\n", afterUsedMem);
				System.out.printf("Total Utilization: %f KB\r\n",totalUsage);

				writeToExcel.writeInt(rowCnt, BasicOptVal_column, algo1.getOptVal());
				writeToExcel.writeDouble(rowCnt, BasicTime_column, totalTime);
				writeToExcel.writeDouble(rowCnt, BasicUtilization_column, totalUsage);
				System.out.println("=================================================");

				algo1 = null;

				beforeUsedMem = 0;
				afterUsedMem = 0;
				startTime = 0;
				endTime = 0;
				totalUsage = 0;
				totalTime = 0;

				//cleanup
				System.gc();

				rowCnt++;
			}

			writeToExcel.close();
		}
		catch(FileNotFoundException fnf) {
			System.out.println("File not FOUND");
			fnf.printStackTrace();
		}
		catch(Exception ee) {
			System.out.println("There was a fail in the efficient");
			ee.printStackTrace();
		}
	
	}

	private static void setExcelHeader(writeXLSX excelWriter) {
		//N, EffOptVal, EffTime, EffUtilization, BasicOptVal, BasicTime, BasicUtilization

		excelWriter.writeString(0, 0, "M+N");
		excelWriter.writeString(0, 1, "EffOptVal");
		excelWriter.writeString(0, 2, "EffTime");
		excelWriter.writeString(0, 3, "EffUtilization");
		excelWriter.writeString(0, 4, "BasicOptVal");
		excelWriter.writeString(0, 5, "BasicTime");
		excelWriter.writeString(0, 6, "BasicUtilization");

	}

	private static long getMemoryInKB() {
		long total = Runtime.getRuntime().totalMemory();
		System.out.printf("Total Memory: %d\r\n",total);
		return (long) ((total - Runtime.getRuntime().freeMemory()) / 1E+3);
	}
	private static long getTimeInMilliseconds() {
		return (long) (System.nanoTime()/1E+6);
	}

	public static double getMemoryInKBDouble()
	{
		double total = Runtime.getRuntime().totalMemory();
		return (total - Runtime.getRuntime().freeMemory()) / 10E+3;
	}
	public static double getTimeInMillisecondsDouble()
	{
		return (double) (System.nanoTime()/10E+6);
	}

//=========================================================================================================================================================
	
	public static void gapCounterTest() {

		String[] gaps = {
				"_ACTG",
				"TAC_G",
				"_A_CA_CACT__G__A_C_TAC_TGACTG_GTGA__C_TACTGACTGGACTGACTACTGACTGGTGACTACT_GACTG_G",
				"ACAC___ACT_GAC_T_AC_TGAC_TGG_TGACT_ACTGAC_T_GGAC_T_GA_CTA_C_TGACTG_GTGAC_TACTGACTGG",
				"TATTATTA_TACGCTATTATACGCGAC_GCG_GACGCGTA_T_AC__G_CT_ATTA_T_AC__GCGAC_GC_GGAC_GCG",
				"__TATTATTATACGCTATTATACGCGACGC__GGAC_G_CGTATA_CGCTATTATACGCGA_C__GCG__GACG_C______G",
				"ACACACTGACTACTGACTGGTGACTACTGACTGGACTGACTACTGACTGGTGACTAC_TGACTG_G",
				"__________T__T_A_T__T_A_TAC_G_C__GAC_G____C_GA_T__T_A_TACGCGAC_GCG",
				"_A_A_A_A_A_A_GTCGTCA_GTCGTCA_A_GTCGTCA_GTCGTCA_A_A_GTCGTCA_GTCGTCA_A_GTCGTCA_GTCGTCA_A_A_A_GTCGTCA_GTCGTCA_A_GTCGTCA_GTCGTCA_A_A_GTCGTCA_GTCGTCAAGT_CGTCAGT_CGTC_",
				"TATATATATATACG_CGT_ACG_CGT_ATACG_CGT_ACG_CGT_ATATACG_CGT_ACG_CGT_ATACG_CGT_ACG_CGT_ATATATACG_CGT_ACG_CGT_ATACG_CGT_ACG_CGT_ATATACG_CGT_ACG_CGT__A_TACG_C_GTACG_CG",
				"TCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCG_TCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGAA",
				"TCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCGATCG_A",
				"ACACACA______A_____A____A______A____CA_CA__CA____A__A_ACAC_ACACAAAAA_CACACAAAAC_ACACAAACACACAACAC_A_CACACACGTACGACG__TACGTTGTACGACGTA__CG_TTACGTACGACGTACGTTG_TACGACGTA__CG_TTGTACGACGTA__CGTTGTACGACG_TACGT_TACGTACGACGTACG_TTGTACGACGTACGTTC_ACACGTACGACGTACG_TTGTACGACGTA__CG_TTA_CGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTGTACGACGTACGTTACGTACG_ACG_TA___CGTTGTACGACGTACGTTCACA_CACACACGTACGACG_TACGTTGTACGACGTACGT_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG_TTCA___CA_CA_ACAC_ACAC_A_CACGTACGACGTACGTTG_TACGACGTA__CG__T_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGT_TCA__CA___CA_CACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA___CA_CGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA_CA__CA____A__ACACACAACAC_A_CACACACGTACGACG_TACGTTGTACGACGTACGT_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGT_TCA__CA___CA_CACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA___CA_CGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG_TTCA___CA_CA_ACAC_ACAC_A_CACGTACGACGTACGTTG_TACGACGTA__CG__T_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGT_TCA__CA___CA_CACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA___CA_CGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTACGT_TACA_CA____A__ACACACAACAC_A_CACACACGTACGACG_TACGTTGTACGACGTACGT_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGT_TCA__CA___CA_CACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA___CA_CGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG_TTCA___CA_CA_ACAC_ACAC_A_CACGTACGACGTACGTTG_TACGACGTA__CG__T_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGT_TCA__CA___CA_CACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA___CA_CGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA_CA__CA____A__ACACACAACAC_A_CACACACGTACGACG_TACGTTGTACGACGTACGT_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGT_TCA__CA___CA_CACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA___CA_CGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG_TTCA___CA_CA_ACAC_ACAC_A_CACGTACGACGTACGTTG_TACGACGTA__CG__T_TACGT_ACGACG__TACGTTGTACGACGTA__CG_TTGTACGACGTACGTTG_TACGACGTA__CG_TTACGTACGACGTA__CGTTGTACGACG_TACGTTCACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGT_TCA__CA___CA_CACACGTACGACGTACG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CGTTCA___CA_CGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTA__CG____TTGTACGACGTA__CG_TTGTACGACGTACGT__TACGTACGACGTACG_TTGTACGACGTACGTT_",
				"_T_T_TATTTTTTATTTTTATTTTATTTTTTATTTTTATTATTTATTTTATTATACGCGACGC___GATTATAC___GCGACGC_GATACGCGACGCGATTATACGCG_ACG_CGTTTA__TTATACG_CG_ACGCGATTA__TACG_CG_ACG_CGATACG_CG_ACGCGATTATACG_CG_ACGCGTT_TAT__T_TTAT_TATACG__CGACG__CGATTATACG_CG_ACG__CGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTATACG_CG_ACG___CGTAT_TAT_TTATTTTATTATACG_CG_ACG__CG_ATTATACGCG_ACG_CGATACG_CG_ACG_CG_AT_TATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGATTTATTTTATTATACGCGACGCGATTA__TACG_CG_ACG_CGATACG_CG_ACGCGATTATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTATTATTTATTTTATTATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTT_ATTATTTATTTTATTATACGCGACGCGATTATACGCG_ACG_CGATACG_CG_ACG_CG_AT_TATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTATTATTTATTTTATTATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGATTTATTTTATTATACGCGACGCGATTA__TACG_CG_ACG_CGATACG_CG_ACGCGATTATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTATTATTTATTTTATTATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTAT_TTATTTTATTATACGCGACGCGATTATACGCG_ACG_CGATACG_CG_ACG_CG_AT_TATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTATTATTTATTTTATTATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGATTTATTTTATTATACGCGACGCGATTA__TACG_CG_ACG_CGATACG_CG_ACGCGATTATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTATTATTTATTTTATTATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTT_ATTATTTATTTTATTATACGCGACGCGATTATACGCG_ACG_CGATACG_CG_ACG_CG_AT_TATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTATTATTTATTTTATTATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGATTTATTTTATTATACGCGACGCGATTA__TACG_CG_ACG_CGATACG_CG_ACGCGATTATACGCGACG_CGTTTA__TTATACG_CG_ACGCGATTATACG_CG_ACG_CGATACG_CG_ACGCGATTA__TACG_CG_ACGCGTT_TAT__T_TTA__TT_ATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTATTATTTATTTTATTATACG__CGACG__CGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACGCGTTTATTATACG_CG_ACGCGATTATACG_CG_ACGCGATACG__CGACG__CGATTATACG_CG_ACG_CG"
				};

		for(String s:gaps)
		{
			gapCounter(s);
		}

	}

	public static void gapCounter(String s)
	{
		int retVal = 0;
		for(int i = 0; i < s.length(); i++)
		{
			if(s.charAt(i) == '_')
				retVal++;
		}

		System.out.printf("Number of Gaps: %d\r\n", retVal);
	}

	/**
	 * Need main for MacOS
	 * @param args - possibly input string
	 * @throws Exception - file not found
	 */
//	public static void main(String[] args) throws Exception {
//		setUp();
//		both();
//	}

}

